plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'walle'
}

android {
    compileSdkVersion buildv.compile_sdk
    File propFile = new File(rootDir.getAbsoluteFile(), 'config.properties')
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new InputStreamReader(new FileInputStream(propFile), "utf-8"))
        defaultConfig {
            applicationId "com.app.test"
            minSdkVersion buildv.min_sdk
            targetSdkVersion buildv.target_sdk
            versionCode Integer.parseInt(props["VERSION_CODE"])
            versionName props['VERSION_NAME']
            multiDexEnabled true
            ndk {
                abiFilters "armeabi"
            }
            kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                }
            }
        }

        //即使报错了也不终止打包
        lintOptions {
            abortOnError false
        }

        //gradle dex 的时候分配的内存.
        dexOptions {
            javaMaxHeapSize "4g"
        }

        signingConfigs {
            debug {
                storeFile file(props['STORE_FILE'])
                storePassword props['STORE_PASSWORD']
                keyAlias props['KEY_ALIAS']
                keyPassword props['KEY_PASSWORD']
            }
            release {
                storeFile file(props['STORE_FILE'])
                storePassword props['STORE_PASSWORD']
                keyAlias props['KEY_ALIAS']
                keyPassword props['KEY_PASSWORD']
            }
        }

        buildTypes {
            debug {
//                applicationIdSuffix props['DEBUG_APP_APPID']
                minifyEnabled false
                shrinkResources false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.debug
            }
            release {
                minifyEnabled true
                shrinkResources true
                zipAlignEnabled true
                jniDebuggable false
                renderscriptDebuggable false
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace(".apk", "-test${defaultConfig.versionCode}-${defaultConfig.versionName}.apk")
                outputFileName = fileName
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    if (!isRunAlone.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(':app_home')
    }
    implementation project(':lib:lib_common')

    kapt "com.alibaba:arouter-compiler:$depv.arouter_compiler"
}
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.getProjectDir()}/channels/channels");

    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-test-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
//    channelFile = new File("${project.getProjectDir()}/channels/channel") //内部升级 渠道
    channelFile = new File("${project.getProjectDir()}/channels/channelw") //内部升级 渠道
}